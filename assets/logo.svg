<svg viewBox="0 0 800 300" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .logo-text {
        font-family: 'Ranade', sans-serif;
        font-size: 7.5rem;
        font-weight: 900;
        letter-spacing: -0.00em;
        fill: none;
        stroke: #ffffff;
        stroke-width: 2;
        stroke-dasharray: 1000;
        stroke-dashoffset: 1000;
        filter: drop-shadow(0 0 15px rgba(138, 43, 226, 0.7));
        animation: drawText 4s ease-in-out forwards;
      }

      .logo-text.data {
        fill: url(#dataGradient);
        animation-delay: 0s;
      }

      .logo-text.karya {
        fill: url(#karyaGradient);
        animation-delay: 1s;
      }

      .neural-node {
        fill: #8a2be2;
        opacity: 0;
        filter: url(#glow);
        animation: nodeGlow 6s ease-in-out infinite;
      }

      .neural-connection {
        stroke: #4169e1;
        stroke-width: 1.5;
        opacity: 0;
        stroke-dasharray: 5, 5;
        filter: url(#connectionGlow);
        animation: connectionPulse 8s ease-in-out infinite;
      }

      .particle {
        fill: #00bfff;
        opacity: 0;
        filter: url(#particleGlow);
        animation: particleFloat 10s ease-in-out infinite;
      }

      .circuit-pulse {
        stroke: #00ffff;
        stroke-width: 1.5;
        fill: none;
        opacity: 0;
        filter: url(#circuitGlow);
        stroke-dasharray: 10, 5;
        animation: circuitFlow 12s ease-in-out infinite;
      }

      .data-flow {
        stroke: url(#dataFlowGradient);
        stroke-width: 2;
        fill: none;
        opacity: 0;
        stroke-dasharray: 15, 5;
        stroke-dashoffset: 100;
        filter: url(#dataFlowGlow);
        animation: dataFlow 9s linear infinite;
      }

      .hexagon {
        fill: none;
        stroke: rgba(65, 105, 225, 0.5);
        stroke-width: 1;
        opacity: 0;
        animation: hexPulse 15s ease-in-out infinite;
      }

      .binary-code {
        font-family: 'Courier New', monospace;
        font-size: 22px;
        fill: rgba(0, 191, 255, 0.7);
        opacity: 0;
        animation: binaryFade 8s ease-in-out infinite;
      }

      .glow-effect {
        filter: url(#glow);
        opacity: 0.3;
      }

      @keyframes drawText {
        0% {
          stroke-dashoffset: 1000;
          fill-opacity: 0;
        }
        70% {
          stroke-dashoffset: 0;
          fill-opacity: 0;
        }
        100% {
          stroke-dashoffset: 0;
          fill-opacity: 1;
          stroke: rgba(255, 255, 255, 0.2);
        }
      }

      @keyframes nodeGlow {
        0%, 100% { 
          opacity: 0; 
          transform: scale(1); 
        }
        20% { 
          opacity: 0.9; 
          transform: scale(1.3); 
        }
        40% { 
          opacity: 0.7; 
          transform: scale(1); 
        }
        60% { 
          opacity: 1; 
          transform: scale(1.2); 
        }
        80% { 
          opacity: 0.5; 
          transform: scale(1); 
        }
      }

      @keyframes connectionPulse {
        0%, 100% { 
          opacity: 0; 
          stroke-dashoffset: 20; 
        }
        25% { 
          opacity: 0.8; 
          stroke-dashoffset: 0; 
        }
        50% { 
          opacity: 1; 
          stroke-dashoffset: -10; 
        }
        75% { 
          opacity: 0.6; 
          stroke-dashoffset: -20; 
        }
      }

      @keyframes particleFloat {
        0%, 100% { 
          opacity: 0; 
          transform: translateY(0px) translateX(0px); 
        }
        20% { 
          opacity: 0.9; 
          transform: translateY(-25px) translateX(15px); 
        }
        40% { 
          opacity: 0.7; 
          transform: translateY(-15px) translateX(-20px); 
        }
        60% { 
          opacity: 1; 
          transform: translateY(-35px) translateX(10px); 
        }
        80% { 
          opacity: 0.5; 
          transform: translateY(-10px) translateX(-12px); 
        }
      }

      @keyframes circuitFlow {
        0%, 100% { 
          opacity: 0; 
          stroke-dashoffset: 100; 
        }
        30% { 
          opacity: 0.9; 
          stroke-dashoffset: 0; 
        }
        70% { 
          opacity: 0.7; 
          stroke-dashoffset: -50; 
        }
      }

      @keyframes dataFlow {
        0% { 
          stroke-dashoffset: 100; 
          opacity: 0; 
        }
        10% { 
          opacity: 0.8; 
        }
        90% { 
          opacity: 0.8; 
        }
        100% { 
          stroke-dashoffset: -100; 
          opacity: 0; 
        }
      }

      @keyframes hexPulse {
        0%, 100% { 
          opacity: 0; 
          transform: rotate(0deg); 
        }
        50% { 
          opacity: 0.4; 
          transform: rotate(180deg); 
        }
      }

      @keyframes binaryFade {
        0%, 100% { 
          opacity: 0; 
        }
        25%, 75% { 
          opacity: 0.7; 
        }
        50% { 
          opacity: 1; 
        }
      }

      /* Staggered animation delays */
      .delay-1s { animation-delay: 1s; }
      .delay-2s { animation-delay: 2s; }
      .delay-3s { animation-delay: 3s; }
      .delay-4s { animation-delay: 4s; }
      .delay-5s { animation-delay: 5s; }
      .delay-6s { animation-delay: 6s; }
      .delay-7s { animation-delay: 7s; }
      .delay-8s { animation-delay: 8s; }
      .delay-9s { animation-delay: 9s; }
      .delay-0-5s { animation-delay: 0.5s; }
      .delay-1-5s { animation-delay: 1.5s; }
      .delay-2-5s { animation-delay: 2.5s; }
      .delay-3-2s { animation-delay: 3.2s; }
      .delay-3-5s { animation-delay: 3.5s; }
      .delay-3-7s { animation-delay: 3.7s; }
      .delay-4-2s { animation-delay: 4.2s; }
      .delay-4-5s { animation-delay: 4.5s; }
      .delay-4-7s { animation-delay: 4.7s; }
      .delay-5-2s { animation-delay: 5.2s; }
      .delay-5-5s { animation-delay: 5.5s; }
      .delay-5-7s { animation-delay: 5.7s; }
      .delay-7-5s { animation-delay: 7.5s; }
      .delay-8-5s { animation-delay: 8.5s; }
      .delay-9-5s { animation-delay: 9.5s; }
    </style>

    <linearGradient id="dataGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#4895ef;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#4169e1;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#4cc9f0;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="karyaGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#4cc9f0;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#8a2be2;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#4895ef;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="dataFlowGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#8a2be2;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#00bfff;stop-opacity:1" />
    </linearGradient>
    
    <!-- Glow Filters -->
    <filter id="glow" height="300%" width="300%" x="-75%" y="-75%">
      <feGaussianBlur in="SourceGraphic" stdDeviation="4" result="blur" />
      <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 20 -8" result="glow" />
      <feComposite in="SourceGraphic" in2="glow" operator="over" />
    </filter>
    
    <filter id="connectionGlow">
      <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
    
    <filter id="particleGlow">
      <feGaussianBlur stdDeviation="3" result="blur"/>
      <feColorMatrix in="blur" type="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 15 -7" />
    </filter>
    
    <filter id="circuitGlow">
      <feGaussianBlur stdDeviation="1.5" result="blur"/>
      <feColorMatrix in="blur" type="matrix" values="0 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 20 -8" />
    </filter>
    
    <filter id="dataFlowGlow">
      <feGaussianBlur stdDeviation="3" result="blur"/>
      <feColorMatrix in="blur" type="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 25 -9" />
    </filter>
  </defs>

  <!-- Background Network Effects -->
  <g class="neural-network">
    <!-- Hexagonal grid -->
    <path class="hexagon delay-1s" d="M 100,50 l 25,-15 l 25,15 l 0,30 l -25,15 l -25,-15 Z" />
    <path class="hexagon delay-2s" d="M 200,80 l 25,-15 l 25,15 l 0,30 l -25,15 l -25,-15 Z" />
    <path class="hexagon delay-3s" d="M 300,40 l 25,-15 l 25,15 l 0,30 l -25,15 l -25,-15 Z" />
    <path class="hexagon delay-4s" d="M 500,30 l 25,-15 l 25,15 l 0,30 l -25,15 l -25,-15 Z" />
    <path class="hexagon delay-5s" d="M 600,60 l 25,-15 l 25,15 l 0,30 l -25,15 l -25,-15 Z" />
    <path class="hexagon delay-6s" d="M 700,90 l 25,-15 l 25,15 l 0,30 l -25,15 l -25,-15 Z" />
    
    <!-- Data flow paths -->
    <path class="data-flow" d="M 0,100 Q 100,80 200,110 T 400,90 T 600,120 T 800,100"/>
    <path class="data-flow delay-3s" d="M 0,130 Q 150,110 300,140 T 600,120 T 800,150"/>
    <path class="data-flow delay-6s" d="M 0,160 Q 120,140 250,170 T 500,150 T 800,180"/>

    <!-- Circuit paths -->
    <path class="circuit-pulse delay-5s" d="M 30,120 Q 150,100 270,130 T 550,110"/>
    <path class="circuit-pulse delay-6s" d="M 70,150 Q 200,140 350,160 T 580,140"/>
    <path class="circuit-pulse delay-7s" d="M 100,180 Q 250,170 400,190 T 750,170"/>

    <!-- Neural connections -->
    <line class="neural-connection delay-3s" x1="50" y1="80" x2="120" y2="60"/>
    <line class="neural-connection delay-3-5s" x1="180" y1="90" x2="240" y2="70"/>
    <line class="neural-connection delay-4s" x1="580" y1="100" x2="650" y2="80"/>
    <line class="neural-connection delay-4-5s" x1="710" y1="110" x2="780" y2="90"/>

    <!-- Neural nodes -->
    <circle class="neural-node delay-3-2s" cx="85" cy="70" r="4"/>
    <circle class="neural-node delay-3-7s" cx="210" cy="80" r="4"/>
    <circle class="neural-node delay-4-7s" cx="615" cy="90" r="4"/>
    <circle class="neural-node delay-5-2s" cx="745" cy="100" r="4"/>
    
    <!-- Floating particles -->
    <circle class="particle delay-7s" cx="100" cy="50" r="2"/>
    <circle class="particle delay-7-5s" cx="250" cy="45" r="2"/>
    <circle class="particle delay-8s" cx="500" cy="40" r="2"/>
    <circle class="particle delay-8-5s" cx="650" cy="60" r="2"/>
    <circle class="particle delay-9s" cx="750" cy="30" r="2"/>

    <!-- Binary code for "DataKarya" -->
    <text class="binary-code delay-0-5s" x="40"  y="50">01000100</text> <!-- D -->
    <text class="binary-code delay-1s"   x="130" y="250">01100001</text> <!-- a -->
    <text class="binary-code delay-1-5s" x="200" y="50">01110100</text> <!-- t -->
    <text class="binary-code delay-2s"   x="310" y="250">01100001</text> <!-- a -->
    <text class="binary-code delay-2-5s" x="360" y="50">01001011</text> <!-- K -->
    <text class="binary-code delay-3s"   x="490" y="250">01100001</text> <!-- a -->
    <text class="binary-code delay-3-5s" x="520" y="50">01110010</text> <!-- r -->
    <text class="binary-code delay-4s"   x="670" y="250">01111001</text> <!-- y -->
    <text class="binary-code delay-4-5s" x="680" y="50">01100001</text> <!-- a -->


  </g>

  <!-- Main Logo Text -->
  <g class="main-text">
    
    <!-- Main text -->
      <!-- Left word: Data -->
  <text class="logo-text data" 
        x="70" y="190" 
        text-anchor="start">
    Data
  </text>

  <!-- Right word: Karya -->
  <text class="logo-text karya" 
        x="390" y="170" 
        text-anchor="start">
    Karya
  </text>
  </g>
</svg>